import json
import boto3
from botocore.stub import Stubber

def create_bedrock_client():
    """
    Create and return a Bedrock Runtime client using boto3.
    Returns:
    - boto3.client: Bedrock Runtime client.
    """
    bedrock = boto3.client(
        service_name="bedrock-runtime",
        region_name="us-west-2"
    )
    return bedrock

def query_action(question, bedrock):
    """
    Query the Bedrock Claude Haiku model with a given user question.
    Args:
    - question (str): User's input/question.
    - bedrock (boto3.client): Bedrock Runtime client.
    Returns:
    - dict: Result from the Bedrock model.
    """
    messages = [
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": question
                }
            ]
        }
    ]
    
    body = json.dumps({
        "anthropic_version": "bedrock-2023-05-31",
        "max_tokens": 1000,
        "messages": messages
    })
    
    modelId = "anthropic.claude-3-haiku-20240307-v1:0"
    contentType = "application/json"
    accept = "application/json"
    
    response = bedrock.invoke_model(body=body, modelId=modelId, accept=accept, contentType=contentType)
    result = json.loads(response.get("body").read())
    print(result)
    return result

def handle_fallback(event):
    """
    Handle the FallbackIntent by querying the Bedrock model with the user's input.
    Args:
    - event (dict): AWS Lambda event containing information about the Lex session.
    Returns:
    - dict: Lex response including the Bedrock model's completion.
    """
    slots = event["sessionState"]["intent"]["slots"]
    intent = event["sessionState"]["intent"]["name"]
    bedrock = create_bedrock_client()
    question = event["inputTranscript"]
    result = query_action(question, bedrock)
    session_attributes = event["sessionState"]["sessionAttributes"]

    response = {
        "sessionState": {
            "dialogAction": {
                "type": "Close",
            },
            "intent": {"name": intent, "slots": slots, "state": "Fulfilled"},
            "sessionAttributes": session_attributes,
        },
        "messages": [
            {"contentType": "PlainText", "content": result["messages"][0]["content"][0]["text"]},
        ],
    }
    return response

def lambda_handler(event, context):
    """
    AWS Lambda handler function.
    Args:
    - event (dict): AWS Lambda event.
    - context (object): AWS Lambda context.
    Returns:
    - dict: Lex response.
    """
    session_attributes = event["sessionState"]["sessionAttributes"]
    intent = event["sessionState"]["intent"]["name"]
    if intent == "FallbackIntent":
        return handle_fallback(event)
    
    # Handle other intents as needed...
    
    # Return a generic response for unsupported intents
    return {
        "sessionState": {
            "dialogAction": {
                "type": "Close"
            },
            "intent": {
                "name": intent,
                "state": "Fulfilled"
            }
        },
        "messages": [
            {
                "contentType": "PlainText",
                "content": "Sorry, I didn't understand that request."
            }
        ]
    }

# Local test function
def test_lambda_handler():
    # Simulate an incoming Lex event
    event = {
        "sessionState": {
            "intent": {
                "name": "FallbackIntent",
                "slots": {},
                "state": "InProgress"
            },
            "sessionAttributes": {}
        },
        "inputTranscript": "What is the capital of France?"
    }
    
    # Context can be None for local testing
    context = None
    
    # Call the lambda_handler function
    response = lambda_handler(event, context)
    
    # Print the response
    print(json.dumps(response, indent=2))

# Run the local test
if __name__ == "__main__":
    # Use the Stubber to mock the Bedrock client if needed for local testing
    bedrock = create_bedrock_client()
    with Stubber(bedrock) as stubber:
        # Set up the expected response from the Bedrock model
        expected_params = {
            "body": json.dumps({
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 1000,
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": "What is the capital of France?"
                            }
                        ]
                    }
                ]
            }),
            "modelId": "anthropic.claude-3-haiku-20240307-v1:0",
            "accept": "application/json",
            "contentType": "application/json"
        }
        stubber.add_response(
            "invoke_model",
            {
                "body": json.dumps({
                    "messages": [
                        {
                            "content": [
                                {
                                    "type": "text",
                                    "text": "The capital of France is Paris."
                                }
                            ]
                        }
                    ]
                })
            },
            expected_params
        )
        
        test_lambda_handler()
